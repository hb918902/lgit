数据类型
1、整数
2、浮点数，小数
3、字符串  '或“括起来的任意文本 ，\转义字符 ,r' '表示’  ’ 内部的字符串不转义，'''   '''  多行内容
4、布尔值  True False   and   or  not 运算
5、空值  None  
6、变量
7、常量   /除法  //除法求整  %求余

编码
python3的字符串使用的是Unicode
ASCII  Unicode  UTF-8（可变长度编码）
ord（）字符变整数      chr（）整数编码变字符
在网络上传输或保存到磁盘，需要把str变为以字节为单位的bytes  b前缀 encode（）变为bytes
从网络或磁盘上读取的字节流为bytes。要变为str，需要decode（）方法。
	始终使用utf-8编码进行str和bytes转换

格式化
	用%实现
	%d  整数			%f  浮点数        %s		字符串			%x		十六进制整数
	%0nd   加0用0补齐，n为共n位
	%.2f
	%%来表示%

使用list和tuple

list  数组
classmates=['micheal','bob','tracy']
从0开始
	追加classmates.append('adam')
	插入classmates.insert(1,'jack')
	删除末尾元素classmates.pop()  classmates.pop(i) i为索引位置
	把某个元素替换，可以直接用赋值的方法。  

	多维数组  s=['python',['java','php']]


tuple  元组，一旦初始化就不能修改，没有pop，insert，不能赋值
	只有一个元素   t=（1,）
	不变指的是指向不变，但是指向对象本身可能发生变化，包含list元素，list本身可能发生变化。


条件判断
if语句	
三种语句：if    if else    if elif else

input
	input（）读取用户输入，返回的数据类型是str，字符串。如果使用输入值进行比较，要先转换成整数型，int（）

2015-12-3


循环
	进行重复运算
	for  x  in ...

	range函数  		1、range（5）从0开始到小于5 的整数   2、range（a，b，c）  从a到小于b的整数，步长为c
									 3、化为list要是list命令，在循环中不用。

dict    或（map）使用健—值存储。
	D={‘name1’：value1;‘name2’：value2}  name必须是常量 D[name]
	通过 in 来判断对错  返回True或False

	获得健对应值D.get('name1')
	删除D.pop('name1')

	特点：内存占用大，查找速度快，可用于高速查找。


set   可以看作数学意义上的集合
	键值集合，元素不能重复，无序。创建set，需要list作为ie输入集合。
	s=set([1,2,3])

	添加s.add(4)
	删除s.remove(4)
	交集操作 s1&s2  s1|s2

set和dict的键值必须是不可变的，不能是变量或者list


函数	代码的抽象
		定义函数
		def name(x):
			return y,z
		
		pass  占位符，不做任何操作。

返回多个值时，实际上是返回一个没有括号的tuple
		   
函数的参数，即函数的接口。
	默认参数
	必选参数在前，默认参数在后。    多个参数时，变化大的参数在前，变化小的参数在后。
	默认参数必须指向不变参数。

可变参数允许传入0个或任意个参数，在函数调用时自动组装成一个tuple
	定义可变参数和定义一个list或tuple相比，仅在参数前面加了一个*号。
	*nums表示把nums的所有元素作为可变参数传进函数中。

关键字参数       用等号
	关键字参数允许传入任意个包含参数名的参数，在函数内部自动组装成一个dict
	**kw
	person('bob',35,city='bejing')
	可以扩展函数的功能
	传入字典参数，要使用**name

命名关键字参数
	def person(name,age,*,city,job):
			pass
	其中*后面为限制的参数名称，必须传入参数（如果设定默认值，可以不传入，但是关键字必须是city和job）。

参数顺序：必选参数，默认参数，可变参数/命名关键字参数，关键字参数。
	

递归函数
		逻辑简单清晰，过深的调用会导致栈溢出


高级特性
	
切片 L[0：3] 起始为第0个元素。L [a,b,c] c为步长。
		数列、元组、字符串

迭代 	for  in   来遍历
		字典迭代  for k in d   for v in d.values（）  for k，v in d.items()

列表生成器  list(range(1,11)) 
					[x*x for x in range(1,11)]  加公式
					[x*x for x in range(1,11)if x%2==0]  加判断语句,用于筛选
					[m+n for m in 'ABC' for n in 'XYZ']  两层循环
		isinstance函数判断变量是不是字符串
		isinstancs(x,str)

生成器
		一边循环，一边计算 generator 把列表生成器[]改为（）
		g=(x*x for x in range(10))  可以通过 next（）获得下一个返回值
		超出时，报错StopIteration
		一般使用for来迭代调用
		yield（） 代替print（）

迭代器
		可直接用于for循环的数据类型。
		1、集合数据类型，list、tuple、dict、set、str
		2、generator 
		可以使用isinstance（）判断对象是否为Iterable（可迭代）	
		from collections import Iterable isinstance（{}，Iterable）

 		可以被next（）函数调用并返回下一个值的对象称为迭代器：Iterator
  		判断	是否是Iterator对象 
		from collections import Iterable   isinstance（{}，Iterator）		
		使用iter（）变为Iterator

函数式编程
高阶函数
		变量可以指向函数  f=abs f（）
		函数名也是变量，所以不能轻易给内置函数名赋值。
传入函数
		可以把函数作为参数传给另一个函数。
map和reduce
		python内建函数map（）和reduce（）
		1、map（）接受两个参数，函数（使用函数名）和Iterable，将函数作用于每个可迭代对象上，返回Iterator。惰性序列，需要list显示。
		2、reduce（）接受函数和序列，然后把函数作用在整个序列上。即序列的所有元素是函数的初始值。返回一个或者一组值。需要 from funtools import reduce

filter  内建函数，用于过滤序列，筛选。惰性序列。需要list显示。返回值True保留。
sorted  sorted([36, 5, -12, 9, -21])
				 sorted(['bob', 'about', 'Zoo', 'Credit'])   ASCII码值
				 sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)


2015-12-6 17:14


返回函数
		相关参数和变量都保存在返回函数中，闭包程序结构
匿名函数
  lambda x：x*x  
     只能有一个表达式，返回值就是表达式的结果
装饰器
def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

偏函数
		当函数的参数个数太多时，可以通过设定默认参数来创建新函数。相当于给参数设定默认值，但也可接受新参数。
		import functools
		int2=functools.partial(int,base=2)

模块

2015-12-7 21：52


模块

#!/usr/bin/env python3
#-*-coding:utf-8-*-

'a test module'

__author__='Micheal chen'

		标准模板

作用域
		正常的函数名和变量名是公开的，可被直接引用。比如abc
		__abc__是特殊变量，可被直接引用，但是有特殊用途。
		_abc  __abc是非公开的，不应该被直接引用。

类
class Student(object):
	"""docstring for Student"""
	def __init__(self, name,score):
		self.name=name													#属性，相当于函数的参数
		self.score=score												#属性

	def print_score(self):
		print('%s %s' %(self.name,self.score))
		
访问限制
		外部代码可以修改一个实例的属性。
		为了防止内部属性不被修改，可以在属性前加上__,__name，变成私有变量，然后通过获取函数来访问
def get_name(self):
		return self.__name
修改
def set_name(self,name):
		set.__name=name  #可以设定范围，防止无效输入

继承和多态
		子类会继承父类的属性和函数，当子类和父类函数名相同时，调用子类函数。

获得对象信息
		使用type（） 函数和基本数据类型
		使用isinstance（） 判断对象是否是某种类型  isinstance(h, Animal)
		对象状态getattr()  setattr()  hasattr()

实例属性和类属性
		实例属性和类属性名称相同时，会优先使用实例属性
2015-12-8  22：22

面向对象高级编程
绑定对象
1、给实例绑定对象
2、给实例绑定一个方法，函数。
3、给类绑定一个方法，函数。

限定实例的属性
定义一个特殊的__slots__变量，来限制实例的属性。

#2015-12-12 10:54
	类的属性
	1、直接定义 self.name=name  外部代码可以直接访问
	2、转变为     self.__name  私有变量 ，并在类内部添加访问函数。在访问函数中设置属性限制，参数检查。
	3、使用@property 方法简化类属性的访问函数代码。
		@property  以及@property产生的@name（属性名字）.setter



class Student(object):

    @property               #设置birth属性
    def birth(self):
        return self._birth  

    @birth.setter           #设置birth属性可以被设置为其他值
    def birth(self, value):
        self._birth = value

    @property               #设置age属性，由于没有setter，只读属性
    def age(self):
        return 2015 - self._birth

多重继承
		class Bat(Mammal, Flyable):
    pass
	通过多重继承可以同时获得多个父类的所有功能。
	MixIn设计模式。

定制类
	__str__返回字符串
	__iter__ 用于迭代
	__getitem__ 可以像list一样照下表取元素。
	__getattr__ 定义属性
	__call__ 直接调用实例

使用枚举类
	定义常量		使用Enum类实现

使用元类

错误、调试和测试
错误
	错误处理机制  try...(except...as...)(else..)finally...
	所有的错误类型都继承自BaseException
	调用堆栈，定位错误位置和错误原因
记录错误
	python内置logging模块  可以捕获错误后继续执行
抛出错误
	错误是一个类，捕获一个错误就是捕获到错误类的一个实例。可以自己定义错误

调试
	断言 assert  asser n!=0,'n is zero'   n!=0应该是True，否则抛出AssertionError   可以启动 -O参数来关闭  python3.4 -O hello.py
	logging  可以输出文件，指定级别debug，info，warning，error。
	pdb设置断点    python3.4 -m pdb hello.py

单元测试
文档测试
2015-12-12 22：16


IO编程
文件读写
读文件  open（）
	f = open('/Users/michael/test.txt', 'r')
	f.read() 用一个str对象表示
	f.close() 文件使用完毕后必须关闭，文件对象占用系统资源，且同一时间打开的文件数量有限。
	为了保证是否出错都能正确的关闭文件，使用下列方式
try:
	f=open('/path/to/file','r')
	print(f.read())
fially:
	if f:
		f.close()
	使用with语句的简化版
with open('/path/to/file',) as f:
	print(f.read())
	读取方法
		read（） 一次性读取文件全部内容，适合小文件
		read（size）每次读取size个字节
		readline（）每次读取一行
		readlines（）一次读取所有内容并按行返回list

open参数
	r:读（默认）
	w：写
	x：创建新文件打开并写
	b：二进制模式
	t：文本模式（默认） 
	
二进制文件
  f = open('/Users/michael/test.jpg', 'rb')

字符编码
	encoding参数，例如读取GBK编码文件（汉字文件）encoding='gbk',
	errors参数，errors='ignore'

写文件
	w 文本文件   wb 二进制文件
	f.write('txt')
	f.close()
必须调用f.close()
用with操作文件IO 

StringIO和BytesIO
	StringIO操作在内存中读写str 
	from io import StringIO    StringIO（’txt‘）  获取值 getvalue（）
	BytesIO操作在内存中读取bytes
  from io import BytesIO 

操作文件和目录
	os模块
文件和目录
	操作文件和目录函数一部分放在os模块中，一部分放在os.path模块中。
	查看当前目录的绝对路径
	os.path.abspath('.')
	在某个目录下创建一个新目录
	os.path.join('/','test')
	os.mkdir('/test')
	删掉一个新目录
	os.rmdir('/test')
	
	得到文件拓展名
	os.path.splitext('/path/to/file.txt')
	当前目录下的文件重命名
	os.rename('test.txt', 'test.py')
	删除文件
	os.remove('test.py')
2015-12-14 21：42




